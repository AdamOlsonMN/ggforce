% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edge_bundle.R
\name{geom_edge_bundle}
\alias{geom_edge_bundle}
\alias{stat_edge_bundle}
\title{Edge bundles based on control points and tension}
\usage{
stat_edge_bundle(mapping = NULL, data = NULL, geom = "edge_bundle",
  position = "identity", na.rm = FALSE, n = 100, show.legend = NA,
  inherit.aes = TRUE, ...)

geom_edge_bundle(mapping = NULL, data = NULL, stat = "edge_bundle",
  position = "identity", arrow = NULL, n = 100, lineend = "butt",
  na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2]{aes}}
or \code{\link[ggplot2]{aes_}}. If specified and \code{inherit.aes = TRUE}
(the default), is combined with the default mapping at the top level of the
plot. You only need to supply mapping if there isn't a mapping defined for
the plot.}

\item{data}{A data frame. If specified, overrides the default data frame
defined at the top level of the plot.}

\item{geom, }{stat Override the default connection between \code{geom_arc} and
\code{stat_arc}.}

\item{position}{Position adjustment, either as a string, or the result of a
call to a position adjustment function.}

\item{na.rm}{If \code{FALSE} (the default), removes missing values with a
warning. If \code{TRUE} silently removes missing values.}

\item{n}{The number of points generated for each spline}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped. \code{FALSE}
never includes, and \code{TRUE} always includes.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics, rather
than combining with them. This is most useful for helper functions that
define both data and aesthetics and shouldn't inherit behaviour from the
default plot specification, e.g. borders.}

\item{...}{other arguments passed on to \code{\link[ggplot2]{layer}}. There
are three types of arguments you can use here:
\itemize{
 \item{Aesthetics: to set an aesthetic to a fixed value, like
 \code{color = "red"} or \code{size = 3.}}
 \item{Other arguments to the layer, for example you override the default
 \code{stat} associated with the layer.}
 \item{Other arguments passed on to the stat.}
}}

\item{arrow}{specification for arrow heads, as created by arrow()}

\item{lineend}{Line end style (round, butt, square)}
}
\description{
This set of stats and geoms implements the edge bundling idea proposed by
Danny Holten (see refs). Based on a set of control points and a tension a
relaxed b-spline is drawn. Often the control points comes from a hierarchical
layout and connects edges, but this is not a requirement.
}
\details{
geom_edge_bundle uses geom_path for the drawing rather than
implementing a native xsplineGrob approach. While the latter might be more
efficient, it does not allow the user to draw a gradient over the spline.
Direct access to the xsplineGrob might be added as a separate geom.
}
\section{Aesthetics}{

geom_edge_bundle understand the following aesthetics (required aesthetics are in
bold):
\itemize{
 \item{\strong{x}}
 \item{\strong{y}}
 \item{color}
 \item{size}
 \item{linetype}
 \item{alpha}
 \item{lineend}
}
}

\section{Computed variables}{


\describe{
 \item{x, y}{The coordinates for the path describing the spline}
 \item{index}{The index of each coordinate useful for drawing a gradient over
 the spline}
}
}
\examples{
# Define some control points
cp <- data.frame(
  x = c(0, -5, -5, 5, 5, 2.5, 5, 7.5, 5, 2.5, 5, 7.5, 5, -2.5, -5, -7.5, -5,
        -2.5, -5, -7.5, -5),
  y = c(0, -5, 5, -5, 5, 5, 7.5, 5, 2.5, -5, -7.5, -5, -2.5, 5, 7.5, 5, 2.5,
        -5, -7.5, -5, -2.5)
)

# Now create some paths between them
paths <- data.frame(
  ind = c(7,5,8,8,5,9,9,5,6,6,5,7,7,5,1,3,15,8,5,1,3,17,9,5,1,2,19,6,5,1,4,
          12,7,5,1,4,10,6,5,1,2,20),
  group = c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,
            9,9,9,9,9,10,10,10,10,10)
)
paths$x <- cp$x[paths$ind]
paths$y <- cp$y[paths$ind]

# Now lets plot this contrived example (see the vignette for a better one)
ggplot() +
  geom_point(aes(x=x, y=y), data=cp, color='steelblue') +
  geom_edge_bundle(aes(x=x, y=y, group=group), data=paths)

}
\author{
Thomas Lin Pedersen. The C++ code for De Boor's algorithm has been
adapted from
\href{https://chi3x10.wordpress.com/2009/10/18/de-boor-algorithm-in-c/}{Jason Yu-Tseh Chi implementation}
}
\references{
Holten, D. (2006). \emph{Hierarchical edge bundles: visualization
of adjacency relations in hierarchical data.} IEEE Transactions on
Visualization and Computer Graphics, \strong{12}(5), 741-748.
http://doi.org/10.1109/TVCG.2006.147
}

